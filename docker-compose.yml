services:
  produtos-app:
    image: 'produtos-app:latest'
    build:
      context: ../produtos-app
    container_name: produtos-app
    ports:
      - 8080:80
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATASOURCE_URL=jdbc:postgresql://db:5432/db_produtos
      - DATASOURCE_USERNAME=postgres
      - DATASOURCE_PASSWORD=teste123
      - AWS_ACCESS_KEY=AKIAZSRR2TF42AH4EETO
      - AWS_SECRET_KEY=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
      - AWS_QUEUE=db_produtos

  clientes-app:
    image: 'clientes-app:latest'
    build:
      context: ../clientes-app
    container_name: clientes-app
    ports:
      - 8081:80
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATASOURCE_URL=jdbc:postgresql://db:5432/db_clientes
      - DATASOURCE_USERNAME=postgres
      - DATASOURCE_PASSWORD=teste123
      - AWS_ACCESS_KEY=AKIAZSRR2TF42AH4EETO
      - AWS_SECRET_KEY=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
      - AWS_QUEUE=db_clientes

#  pedidos-app:
#    image: 'pedidos-app:latest'
#    build:
#      context: ../pedidos-app
#   container_name: pedidos-app
#    ports:
#      - 8082:80
#    depends_on:
#      db:
#        condition: service_healthy
#    environment:
#      - DATASOURCE_URL=jdbc:postgresql://db:5432/db_pedidos
#      - DATASOURCE_USERNAME=postgres
#      - DATASOURCE_PASSWORD=teste123

#  entregas-app:
#    image: 'entregas-app:latest'
#    build:
#      context: ../entregas-app
#    container_name: entregas-app
#    ports:
#      - 8081:80
#    depends_on:
#      db:
#        condition: service_healthy
#    environment:
#      - DATASOURCE_URL=jdbc:postgresql://db:5432/db_entregas
#      - DATASOURCE_USERNAME=postgres
#      - DATASOURCE_PASSWORD=teste123

  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: teste123
      POSTGRES_MULTIPLE_DATABASES: db_produtos, db_clientes, db_pedidos
    volumes:
      - ./scripts/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
      - ../postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5


